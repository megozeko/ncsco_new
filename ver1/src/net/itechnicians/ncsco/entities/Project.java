package net.itechnicians.ncsco.entities;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PROJECT.
 */
public class Project {

    private Long id;
    /** Not-null value. */
    private String ProjectName;
    /** Not-null value. */
    private String ProjectAddress;
    private String ProjectDepartment;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProjectDao myDao;

    private Officer resposibleOfficer;
    private Long resposibleOfficer__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Project() {
    }

    public Project(Long id) {
        this.id = id;
    }

    public Project(Long id, String ProjectName, String ProjectAddress, String ProjectDepartment) {
        this.id = id;
        this.ProjectName = ProjectName;
        this.ProjectAddress = ProjectAddress;
        this.ProjectDepartment = ProjectDepartment;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProjectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getProjectName() {
        return ProjectName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setProjectName(String ProjectName) {
        this.ProjectName = ProjectName;
    }

    /** Not-null value. */
    public String getProjectAddress() {
        return ProjectAddress;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setProjectAddress(String ProjectAddress) {
        this.ProjectAddress = ProjectAddress;
    }

    public String getProjectDepartment() {
        return ProjectDepartment;
    }

    public void setProjectDepartment(String ProjectDepartment) {
        this.ProjectDepartment = ProjectDepartment;
    }

    /** To-one relationship, resolved on first access. */
    public Officer getResposibleOfficer() {
        long __key = this.resposibleOfficer__resolvedKey;
        if (resposibleOfficer__resolvedKey == null || !resposibleOfficer__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OfficerDao targetDao = daoSession.getOfficerDao();
            Officer resposibleOfficerNew = targetDao.load(__key);
            synchronized (this) {
                resposibleOfficer = resposibleOfficerNew;
            	resposibleOfficer__resolvedKey = __key;
            }
        }
        return resposibleOfficer;
    }

    public void setResposibleOfficer(Officer resposibleOfficer) {
        if (resposibleOfficer == null) {
            throw new DaoException("To-one property 'officerMilId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.resposibleOfficer = resposibleOfficer;
            resposibleOfficer__resolvedKey = resposibleOfficer.getId();
            resposibleOfficer__resolvedKey = resposibleOfficer__resolvedKey;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
