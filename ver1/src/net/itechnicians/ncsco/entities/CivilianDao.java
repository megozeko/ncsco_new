package net.itechnicians.ncsco.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CIVILIAN.
*/
public class CivilianDao extends AbstractDao<Civilian, Long> {

    public static final String TABLENAME = "CIVILIAN";

    /**
     * Properties of entity Civilian.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CivilianName = new Property(1, String.class, "CivilianName", false, "CIVILIAN_NAME");
        public final static Property CivilianAddress = new Property(2, String.class, "CivilianAddress", false, "CIVILIAN_ADDRESS");
        public final static Property CivilianBirthDate = new Property(3, double.class, "CivilianBirthDate", false, "CIVILIAN_BIRTH_DATE");
        public final static Property CivilianDepartment = new Property(4, String.class, "CivilianDepartment", false, "CIVILIAN_DEPARTMENT");
        public final static Property CivilianPosition = new Property(5, String.class, "CivilianPosition", false, "CIVILIAN_POSITION");
    };


    public CivilianDao(DaoConfig config) {
        super(config);
    }
    
    public CivilianDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CIVILIAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CIVILIAN_NAME' TEXT NOT NULL ," + // 1: CivilianName
                "'CIVILIAN_ADDRESS' TEXT NOT NULL ," + // 2: CivilianAddress
                "'CIVILIAN_BIRTH_DATE' REAL NOT NULL ," + // 3: CivilianBirthDate
                "'CIVILIAN_DEPARTMENT' TEXT," + // 4: CivilianDepartment
                "'CIVILIAN_POSITION' TEXT);"); // 5: CivilianPosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CIVILIAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Civilian entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCivilianName());
        stmt.bindString(3, entity.getCivilianAddress());
        stmt.bindDouble(4, entity.getCivilianBirthDate());
 
        String CivilianDepartment = entity.getCivilianDepartment();
        if (CivilianDepartment != null) {
            stmt.bindString(5, CivilianDepartment);
        }
 
        String CivilianPosition = entity.getCivilianPosition();
        if (CivilianPosition != null) {
            stmt.bindString(6, CivilianPosition);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Civilian readEntity(Cursor cursor, int offset) {
        Civilian entity = new Civilian( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CivilianName
            cursor.getString(offset + 2), // CivilianAddress
            cursor.getDouble(offset + 3), // CivilianBirthDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CivilianDepartment
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // CivilianPosition
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Civilian entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCivilianName(cursor.getString(offset + 1));
        entity.setCivilianAddress(cursor.getString(offset + 2));
        entity.setCivilianBirthDate(cursor.getDouble(offset + 3));
        entity.setCivilianDepartment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCivilianPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Civilian entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Civilian entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
