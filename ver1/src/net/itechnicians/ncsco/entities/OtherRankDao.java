package net.itechnicians.ncsco.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OTHER_RANK.
*/
public class OtherRankDao extends AbstractDao<OtherRank, Long> {

    public static final String TABLENAME = "OTHER_RANK";

    /**
     * Properties of entity OtherRank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OtherRankId = new Property(1, String.class, "OtherRankId", false, "OTHER_RANK_ID");
        public final static Property OtherRankName = new Property(2, String.class, "OtherRankName", false, "OTHER_RANK_NAME");
        public final static Property OtherRankAddress = new Property(3, String.class, "OtherRankAddress", false, "OTHER_RANK_ADDRESS");
        public final static Property OtherRankBirthDate = new Property(4, double.class, "OtherRankBirthDate", false, "OTHER_RANK_BIRTH_DATE");
        public final static Property OtherRankRank = new Property(5, String.class, "OtherRankRank", false, "OTHER_RANK_RANK");
        public final static Property OtherRankDepartment = new Property(6, String.class, "OtherRankDepartment", false, "OTHER_RANK_DEPARTMENT");
        public final static Property OtherRankPosition = new Property(7, String.class, "OtherRankPosition", false, "OTHER_RANK_POSITION");
    };


    public OtherRankDao(DaoConfig config) {
        super(config);
    }
    
    public OtherRankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OTHER_RANK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'OTHER_RANK_ID' TEXT NOT NULL UNIQUE ," + // 1: OtherRankId
                "'OTHER_RANK_NAME' TEXT NOT NULL ," + // 2: OtherRankName
                "'OTHER_RANK_ADDRESS' TEXT NOT NULL ," + // 3: OtherRankAddress
                "'OTHER_RANK_BIRTH_DATE' REAL NOT NULL ," + // 4: OtherRankBirthDate
                "'OTHER_RANK_RANK' TEXT NOT NULL ," + // 5: OtherRankRank
                "'OTHER_RANK_DEPARTMENT' TEXT," + // 6: OtherRankDepartment
                "'OTHER_RANK_POSITION' TEXT);"); // 7: OtherRankPosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OTHER_RANK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OtherRank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOtherRankId());
        stmt.bindString(3, entity.getOtherRankName());
        stmt.bindString(4, entity.getOtherRankAddress());
        stmt.bindDouble(5, entity.getOtherRankBirthDate());
        stmt.bindString(6, entity.getOtherRankRank());
 
        String OtherRankDepartment = entity.getOtherRankDepartment();
        if (OtherRankDepartment != null) {
            stmt.bindString(7, OtherRankDepartment);
        }
 
        String OtherRankPosition = entity.getOtherRankPosition();
        if (OtherRankPosition != null) {
            stmt.bindString(8, OtherRankPosition);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OtherRank readEntity(Cursor cursor, int offset) {
        OtherRank entity = new OtherRank( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // OtherRankId
            cursor.getString(offset + 2), // OtherRankName
            cursor.getString(offset + 3), // OtherRankAddress
            cursor.getDouble(offset + 4), // OtherRankBirthDate
            cursor.getString(offset + 5), // OtherRankRank
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // OtherRankDepartment
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // OtherRankPosition
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OtherRank entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOtherRankId(cursor.getString(offset + 1));
        entity.setOtherRankName(cursor.getString(offset + 2));
        entity.setOtherRankAddress(cursor.getString(offset + 3));
        entity.setOtherRankBirthDate(cursor.getDouble(offset + 4));
        entity.setOtherRankRank(cursor.getString(offset + 5));
        entity.setOtherRankDepartment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOtherRankPosition(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OtherRank entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OtherRank entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
